---
services:
  adguard:
    image: adguard/adguardhome:latest
    container_name: adguard-home
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:53:53/tcp"
      - "${SERVER_IP}:53:53/udp"
      - "${SERVER_IP}:3000:3000/tcp"
      - "${SERVER_IP}:8888:80/tcp"
    volumes:
      - ./data/adguard/work:/opt/adguardhome/work
      - ./data/adguard/conf:/opt/adguardhome/conf
    networks:
      - homeserver
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adguard.rule=Host(`adguard.${HOME_DOMAIN}`)"
      - "traefik.http.routers.adguard.entrypoints=websecure"
      - "traefik.http.routers.adguard.tls=true"
      - "traefik.http.routers.adguard.tls.certresolver=letsencrypt"
      - "traefik.http.services.adguard.loadbalancer.server.port=80"

  n8n-init:
    image: alpine:latest
    container_name: n8n-init
    restart: "no"
    volumes:
      - ./data/n8n:/data
    command: >
      sh -c "
        mkdir -p /data &&
        chown -R 1000:1000 /data &&
        chmod -R 755 /data
      "

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    user: "1000:1000"
    expose:
      - 5678
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=n8n.${HOME_DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://n8n.${HOME_DOMAIN}/
      - N8N_EDITOR_BASE_URL=https://n8n.${HOME_DOMAIN}
      - GENERIC_TIMEZONE=${TIMEZONE}
      - N8N_SECURE_COOKIE=true
      - N8N_RUNNERS_TASK_TIMEOUT=${N8N_RUNNERS_TASK_TIMEOUT}
      - EXECUTIONS_TIMEOUT=${EXECUTIONS_TIMEOUT}
      - EXECUTIONS_TIMEOUT_MAX=${EXECUTIONS_TIMEOUT_MAX}
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - homeserver
    depends_on:
      - n8n-init
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${HOME_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    # Security note: LinuxServer.io containers use s6-overlay init system
    # Dropping all capabilities or no-new-privileges prevents init from executing
    # Keep only the required NET_ADMIN and SYS_MODULE capabilities
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - SERVERURL=${WIREGUARD_SERVERURL}
      - SERVERPORT=${WIREGUARD_PORT:-51820}
      - PEERS=${WIREGUARD_PEERS:-5}
      - PEERDNS=${SERVER_IP}
      # CRITICAL: Split tunneling - only route home network traffic through VPN
      # DO NOT use 0.0.0.0/0 unless you want full tunneling (not recommended)
      - INTERNAL_SUBNET=${WIREGUARD_SUBNET:-10.13.13.0/24}
      - ALLOWEDIPS=${WIREGUARD_ALLOWEDIPS:-192.168.1.0/24,10.13.13.0/24}
      - LOG_CONFS=${WIREGUARD_LOG_CONFS:-true}
      - PERSISTENTKEEPALIVE_PEERS=${WIREGUARD_KEEPALIVE:-25}
    ports:
      - "${WIREGUARD_PORT:-51820}:51820/udp"
      - "${SERVER_IP}:51821:51821/tcp"
    volumes:
      - ./data/wireguard:/config
      - /lib/modules:/lib/modules:ro
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    networks:
      - homeserver
    healthcheck:
      test: ["CMD", "test", "-f", "/config/wg0.conf"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Traefik - Reverse proxy for domain-based service access
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    command:
      # API and Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      # TLS
      - "--entrypoints.websecure.http.tls=true"

      # Let's Encrypt Certificate Resolver with Gandi
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=gandiv5"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json"
      # FOR TESTING ONLY - Uncomment to use staging:
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

      # Wildcard Certificate Configuration
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=30"

      # Ping endpoint for health checks
      - "--ping=true"

      # Logging
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--log.level=DEBUG"

    ports:
      - "${SERVER_IP}:80:80"
      - "${SERVER_IP}:443:443"

    environment:
      # Gandi API credentials
      - GANDIV5_API_KEY=${GANDIV5_API_KEY}

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/traefik/certs:/certs
      - ./data/traefik/logs:/var/log/traefik
      - ./config/traefik:/etc/traefik:ro

    networks:
      - homeserver

    labels:
      # Enable Traefik for the dashboard
      - "traefik.enable=true"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${HOME_DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"

      # Request wildcard certificate for all services
      - "traefik.http.routers.dashboard.tls.domains[0].main=${HOME_DOMAIN}"
      - "traefik.http.routers.dashboard.tls.domains[0].sans=*.${HOME_DOMAIN}"
      - "traefik.http.routers.dashboard.tls.domains[1].main=${PUBLIC_DOMAIN}"
      - "traefik.http.routers.dashboard.tls.domains[1].sans=*.${PUBLIC_DOMAIN}"

      # Dashboard middleware (basic auth)
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$1$$3TOX7HzuCTU"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"

    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  homeserver:
    driver: bridge
