---
services:
  adguard:
    image: adguard/adguardhome:latest
    container_name: adguard-home
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:53:53/tcp"
      - "${SERVER_IP}:53:53/udp"
      - "${SERVER_IP}:3000:3000/tcp"
      - "${SERVER_IP}:80:80/tcp"
    volumes:
      - ./data/adguard/work:/opt/adguardhome/work
      - ./data/adguard/conf:/opt/adguardhome/conf
    networks:
      - homeserver

  n8n-init:
    image: alpine:latest
    container_name: n8n-init
    restart: "no"
    volumes:
      - ./data/n8n:/data
    command: >
      sh -c "
        mkdir -p /data &&
        chown -R 1000:1000 /data &&
        chmod -R 755 /data
      "

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "${SERVER_IP}:5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=${SERVER_IP}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - N8N_SSL_KEY=${N8N_SSL_KEY}
      - N8N_SSL_CERT=${N8N_SSL_CERT}
      - WEBHOOK_URL=https://${SERVER_IP}:5678/
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
      - GENERIC_TIMEZONE=${TIMEZONE}
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
      - N8N_RUNNERS_TASK_TIMEOUT=${N8N_RUNNERS_TASK_TIMEOUT}
      - EXECUTIONS_TIMEOUT=${EXECUTIONS_TIMEOUT}
      - EXECUTIONS_TIMEOUT_MAX=${EXECUTIONS_TIMEOUT_MAX}
    volumes:
      - ./data/n8n:/home/node/.n8n
      - ./ssl:/ssl:ro
    networks:
      - homeserver
    depends_on:
      - ollama
      - n8n-init

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-1}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS:-1}
      - OLLAMA_LOAD_TIMEOUT=${OLLAMA_LOAD_TIMEOUT:-600}
    volumes:
      - ./data/ollama:/root/.ollama
    networks:
      - homeserver

  ollama-setup:
    image: alpine:latest
    container_name: ollama-setup
    restart: "no"
    depends_on:
      - ollama
    networks:
      - homeserver
    command: >
      sh -c "
        apk add --no-cache curl &&
        echo 'Waiting for Ollama to be ready...' &&
        sleep 15 &&
        echo 'Testing Ollama connectivity...' &&
        curl -f http://ollama:11434/api/version || (echo 'Ollama not ready, exiting' && exit 1) &&
        echo 'Starting model downloads...' &&
        echo 'Pulling deepseek-coder:6.7b (this may take several minutes)...' &&
        curl -X POST http://ollama:11434/api/pull -d '{\"name\":\"deepseek-coder:6.7b\"}' -m 1800 &&
        echo 'Waiting 30 seconds before next download...' &&
        sleep 30 &&
        echo 'Pulling llama3.2:3b (this may take several minutes)...' &&
        curl -X POST http://ollama:11434/api/pull -d '{\"name\":\"llama3.2:3b\"}' -m 1800 &&
        echo 'Model downloads initiated. Check progress with: docker exec ollama ollama ps'
      "

  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    # Security note: LinuxServer.io containers use s6-overlay init system
    # Dropping all capabilities or no-new-privileges prevents init from executing
    # Keep only the required NET_ADMIN and SYS_MODULE capabilities
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - SERVERURL=${WIREGUARD_SERVERURL}
      - SERVERPORT=${WIREGUARD_PORT:-51820}
      - PEERS=${WIREGUARD_PEERS:-5}
      - PEERDNS=${SERVER_IP}
      # CRITICAL: Split tunneling - only route home network traffic through VPN
      # DO NOT use 0.0.0.0/0 unless you want full tunneling (not recommended)
      - INTERNAL_SUBNET=${WIREGUARD_SUBNET:-10.13.13.0/24}
      - ALLOWEDIPS=${WIREGUARD_ALLOWEDIPS:-192.168.1.0/24,10.13.13.0/24}
      - LOG_CONFS=${WIREGUARD_LOG_CONFS:-true}
      - PERSISTENTKEEPALIVE_PEERS=${WIREGUARD_KEEPALIVE:-25}
    ports:
      - "${WIREGUARD_PORT:-51820}:51820/udp"
      - "${SERVER_IP}:51821:51821/tcp"
    volumes:
      - ./data/wireguard:/config
      - /lib/modules:/lib/modules:ro
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    networks:
      - homeserver
    healthcheck:
      test: ["CMD", "test", "-f", "/config/wg0.conf"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Habitica - Gamified habit and task tracker
  habitica-mongo:
    image: mongo:${HABITICA_MONGO_VERSION:-5.0}
    container_name: habitica-mongo
    restart: unless-stopped
    command: ["--replSet", "rs", "--bind_ip_all", "--port", "27017"]
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - ./data/habitica/db:/data/db
      - ./data/habitica/dbconf:/data/configdb
    networks:
      - homeserver
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate() }" | mongosh --port 27017 --quiet
      interval: 10s
      timeout: 30s
      start_period: 10s
      start_interval: 1s
      retries: 30

  habitica-server:
    image: awinterstein/habitica-server:${HABITICA_VERSION:-latest}
    container_name: habitica-server
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:3000:3000"
    environment:
      - NODE_DB_URI=mongodb://habitica-mongo/habitica
      - BASE_URL=${HABITICA_BASE_URL:-http://127.0.0.1:8080}
      - INVITE_ONLY=${HABITICA_INVITE_ONLY:-false}
      - EMAIL_SERVER_URL=${HABITICA_EMAIL_SERVER_URL:-}
      - EMAIL_SERVER_PORT=${HABITICA_EMAIL_SERVER_PORT:-587}
      - EMAIL_SERVER_AUTH_USER=${HABITICA_EMAIL_AUTH_USER:-}
      - EMAIL_SERVER_AUTH_PASSWORD=${HABITICA_EMAIL_AUTH_PASSWORD:-}
      - ADMIN_EMAIL=${HABITICA_ADMIN_EMAIL:-}
      - TZ=${TIMEZONE}
    networks:
      - homeserver
    depends_on:
      habitica-mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/v3/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  habitica-client:
    image: awinterstein/habitica-client:${HABITICA_VERSION:-latest}
    container_name: habitica-client
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:8080:80"
    environment:
      - TZ=${TIMEZONE}
    networks:
      - homeserver
    depends_on:
      habitica-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  # Bookwyrm - Social reading and book tracking
  bookwyrm-db:
    image: postgres:16-alpine
    container_name: bookwyrm-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${BOOKWYRM_DB_USER:-bookwyrm}
      - POSTGRES_PASSWORD=${BOOKWYRM_DB_PASSWORD}
      - POSTGRES_DB=${BOOKWYRM_DB_NAME:-bookwyrm}
    volumes:
      - ./data/bookwyrm/pgdata:/var/lib/postgresql/data
    networks:
      - homeserver
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BOOKWYRM_DB_USER:-bookwyrm}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  bookwyrm-redis-activity:
    image: redis:7.2-alpine
    container_name: bookwyrm-redis-activity
    restart: unless-stopped
    command: redis-server --requirepass ${BOOKWYRM_REDIS_ACTIVITY_PASSWORD} --appendonly yes
    volumes:
      - ./data/bookwyrm/redis-activity:/data
    networks:
      - homeserver
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  bookwyrm-redis-broker:
    image: redis:7.2-alpine
    container_name: bookwyrm-redis-broker
    restart: unless-stopped
    command: redis-server --requirepass ${BOOKWYRM_REDIS_BROKER_PASSWORD} --appendonly yes
    volumes:
      - ./data/bookwyrm/redis-broker:/data
    networks:
      - homeserver
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  bookwyrm:
    build:
      context: ./bookwyrm
      dockerfile: Dockerfile
    container_name: bookwyrm
    restart: unless-stopped
    working_dir: /app
    ports:
      - "${SERVER_IP}:8000:8000"
    environment:
      # Domain and Security
      - DOMAIN=${BOOKWYRM_DOMAIN}
      - SECRET_KEY=${BOOKWYRM_SECRET_KEY}
      - USE_HTTPS=${BOOKWYRM_USE_HTTPS:-false}
      - CSRF_TRUSTED_ORIGINS=http://${SERVER_IP}:8000,http://${BOOKWYRM_DOMAIN}

      # Database
      - POSTGRES_HOST=bookwyrm-db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${BOOKWYRM_DB_USER:-bookwyrm}
      - POSTGRES_PASSWORD=${BOOKWYRM_DB_PASSWORD}
      - POSTGRES_DB=${BOOKWYRM_DB_NAME:-bookwyrm}

      # Redis
      - REDIS_ACTIVITY_HOST=bookwyrm-redis-activity
      - REDIS_ACTIVITY_PORT=6379
      - REDIS_ACTIVITY_PASSWORD=${BOOKWYRM_REDIS_ACTIVITY_PASSWORD}
      - REDIS_BROKER_HOST=bookwyrm-redis-broker
      - REDIS_BROKER_PORT=6379
      - REDIS_BROKER_PASSWORD=${BOOKWYRM_REDIS_BROKER_PASSWORD}
      - CELERY_BROKER=redis://:${BOOKWYRM_REDIS_BROKER_PASSWORD}@bookwyrm-redis-broker:6379/0

      # Email (optional)
      - EMAIL_HOST=${BOOKWYRM_EMAIL_HOST:-}
      - EMAIL_PORT=${BOOKWYRM_EMAIL_PORT:-587}
      - EMAIL_HOST_USER=${BOOKWYRM_EMAIL_USER:-}
      - EMAIL_HOST_PASSWORD=${BOOKWYRM_EMAIL_PASSWORD:-}
      - EMAIL_USE_TLS=${BOOKWYRM_EMAIL_USE_TLS:-true}

      # Other settings
      - TZ=${TIMEZONE}
      - LOCALE_LANGUAGE=en
      - ENABLE_PREVIEW_IMAGES=true
    volumes:
      - ./bookwyrm:/app
      - ./data/bookwyrm/images:/app/bookwyrm/static/images
      - ./data/bookwyrm/static:/app/bookwyrm/static
    networks:
      - homeserver
    depends_on:
      bookwyrm-db:
        condition: service_healthy
      bookwyrm-redis-activity:
        condition: service_healthy
      bookwyrm-redis-broker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  bookwyrm-celery:
    build:
      context: ./bookwyrm
      dockerfile: Dockerfile
    container_name: bookwyrm-celery
    restart: unless-stopped
    working_dir: /app
    command: celery -A celerywyrm worker -l info -Q high_priority,medium_priority,low_priority,imports,broadcast
    environment:
      # Domain and Security
      - DOMAIN=${BOOKWYRM_DOMAIN}
      - SECRET_KEY=${BOOKWYRM_SECRET_KEY}

      # Database
      - POSTGRES_HOST=bookwyrm-db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${BOOKWYRM_DB_USER:-bookwyrm}
      - POSTGRES_PASSWORD=${BOOKWYRM_DB_PASSWORD}
      - POSTGRES_DB=${BOOKWYRM_DB_NAME:-bookwyrm}

      # Redis
      - REDIS_ACTIVITY_HOST=bookwyrm-redis-activity
      - REDIS_ACTIVITY_PORT=6379
      - REDIS_ACTIVITY_PASSWORD=${BOOKWYRM_REDIS_ACTIVITY_PASSWORD}
      - REDIS_BROKER_HOST=bookwyrm-redis-broker
      - REDIS_BROKER_PORT=6379
      - REDIS_BROKER_PASSWORD=${BOOKWYRM_REDIS_BROKER_PASSWORD}
      - CELERY_BROKER=redis://:${BOOKWYRM_REDIS_BROKER_PASSWORD}@bookwyrm-redis-broker:6379/0

      # Other settings
      - TZ=${TIMEZONE}
    volumes:
      - ./bookwyrm:/app
      - ./data/bookwyrm/images:/app/bookwyrm/static/images
      - ./data/bookwyrm/static:/app/bookwyrm/static
    networks:
      - homeserver
    depends_on:
      bookwyrm-db:
        condition: service_healthy
      bookwyrm-redis-broker:
        condition: service_healthy

  bookwyrm-celery-beat:
    build:
      context: ./bookwyrm
      dockerfile: Dockerfile
    container_name: bookwyrm-celery-beat
    restart: unless-stopped
    working_dir: /app
    command: celery -A celerywyrm beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      # Domain and Security
      - DOMAIN=${BOOKWYRM_DOMAIN}
      - SECRET_KEY=${BOOKWYRM_SECRET_KEY}

      # Database
      - POSTGRES_HOST=bookwyrm-db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${BOOKWYRM_DB_USER:-bookwyrm}
      - POSTGRES_PASSWORD=${BOOKWYRM_DB_PASSWORD}
      - POSTGRES_DB=${BOOKWYRM_DB_NAME:-bookwyrm}

      # Redis
      - REDIS_BROKER_HOST=bookwyrm-redis-broker
      - REDIS_BROKER_PORT=6379
      - REDIS_BROKER_PASSWORD=${BOOKWYRM_REDIS_BROKER_PASSWORD}
      - CELERY_BROKER=redis://:${BOOKWYRM_REDIS_BROKER_PASSWORD}@bookwyrm-redis-broker:6379/0

      # Other settings
      - TZ=${TIMEZONE}
    volumes:
      - ./bookwyrm:/app
    networks:
      - homeserver
    depends_on:
      - bookwyrm-celery

networks:
  homeserver:
    driver: bridge
