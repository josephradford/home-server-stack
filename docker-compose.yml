---
services:
  adguard:
    image: adguard/adguardhome:latest
    container_name: adguard-home
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:53:53/tcp"
      - "${SERVER_IP}:53:53/udp"
      - "${SERVER_IP}:3000:3000/tcp"
      - "${SERVER_IP}:8888:80/tcp"
    volumes:
      - ./data/adguard/work:/opt/adguardhome/work
      - ./data/adguard/conf:/opt/adguardhome/conf
    networks:
      - homeserver
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adguard-http.rule=Host(`adguard.home.local`)"
      - "traefik.http.routers.adguard-http.entrypoints=web"
      - "traefik.http.routers.adguard-http.middlewares=redirect-to-https"
      - "traefik.http.routers.adguard.rule=Host(`adguard.home.local`)"
      - "traefik.http.routers.adguard.entrypoints=websecure"
      - "traefik.http.routers.adguard.tls=true"
      - "traefik.http.services.adguard.loadbalancer.server.port=80"

  n8n-init:
    image: alpine:latest
    container_name: n8n-init
    restart: "no"
    volumes:
      - ./data/n8n:/data
    command: >
      sh -c "
        mkdir -p /data &&
        chown -R 1000:1000 /data &&
        chmod -R 755 /data
      "

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "${SERVER_IP}:5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=n8n.home.local
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://n8n.home.local/
      - N8N_EDITOR_BASE_URL=https://n8n.home.local
      - GENERIC_TIMEZONE=${TIMEZONE}
      - N8N_SECURE_COOKIE=true
      - N8N_RUNNERS_TASK_TIMEOUT=${N8N_RUNNERS_TASK_TIMEOUT}
      - EXECUTIONS_TIMEOUT=${EXECUTIONS_TIMEOUT}
      - EXECUTIONS_TIMEOUT_MAX=${EXECUTIONS_TIMEOUT_MAX}
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - homeserver
    depends_on:
      - ollama
      - n8n-init
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n-http.rule=Host(`n8n.home.local`)"
      - "traefik.http.routers.n8n-http.entrypoints=web"
      - "traefik.http.routers.n8n-http.middlewares=redirect-to-https"
      - "traefik.http.routers.n8n.rule=Host(`n8n.home.local`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-1}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS:-1}
      - OLLAMA_LOAD_TIMEOUT=${OLLAMA_LOAD_TIMEOUT:-600}
    volumes:
      - ./data/ollama:/root/.ollama
    networks:
      - homeserver
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ollama-http.rule=Host(`ollama.home.local`)"
      - "traefik.http.routers.ollama-http.entrypoints=web"
      - "traefik.http.routers.ollama-http.middlewares=redirect-to-https"
      - "traefik.http.routers.ollama.rule=Host(`ollama.home.local`)"
      - "traefik.http.routers.ollama.entrypoints=websecure"
      - "traefik.http.routers.ollama.tls=true"
      - "traefik.http.services.ollama.loadbalancer.server.port=11434"

  ollama-setup:
    image: alpine:latest
    container_name: ollama-setup
    restart: "no"
    depends_on:
      - ollama
    networks:
      - homeserver
    command: >
      sh -c "
        apk add --no-cache curl &&
        echo 'Waiting for Ollama to be ready...' &&
        sleep 15 &&
        echo 'Testing Ollama connectivity...' &&
        curl -f http://ollama:11434/api/version || (echo 'Ollama not ready, exiting' && exit 1) &&
        echo 'Starting model downloads...' &&
        echo 'Pulling deepseek-coder:6.7b (this may take several minutes)...' &&
        curl -X POST http://ollama:11434/api/pull -d '{\"name\":\"deepseek-coder:6.7b\"}' -m 1800 &&
        echo 'Waiting 30 seconds before next download...' &&
        sleep 30 &&
        echo 'Pulling llama3.2:3b (this may take several minutes)...' &&
        curl -X POST http://ollama:11434/api/pull -d '{\"name\":\"llama3.2:3b\"}' -m 1800 &&
        echo 'Model downloads initiated. Check progress with: docker exec ollama ollama ps'
      "

  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    # Security note: LinuxServer.io containers use s6-overlay init system
    # Dropping all capabilities or no-new-privileges prevents init from executing
    # Keep only the required NET_ADMIN and SYS_MODULE capabilities
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - SERVERURL=${WIREGUARD_SERVERURL}
      - SERVERPORT=${WIREGUARD_PORT:-51820}
      - PEERS=${WIREGUARD_PEERS:-5}
      - PEERDNS=${SERVER_IP}
      # CRITICAL: Split tunneling - only route home network traffic through VPN
      # DO NOT use 0.0.0.0/0 unless you want full tunneling (not recommended)
      - INTERNAL_SUBNET=${WIREGUARD_SUBNET:-10.13.13.0/24}
      - ALLOWEDIPS=${WIREGUARD_ALLOWEDIPS:-192.168.1.0/24,10.13.13.0/24}
      - LOG_CONFS=${WIREGUARD_LOG_CONFS:-true}
      - PERSISTENTKEEPALIVE_PEERS=${WIREGUARD_KEEPALIVE:-25}
    ports:
      - "${WIREGUARD_PORT:-51820}:51820/udp"
      - "${SERVER_IP}:51821:51821/tcp"
    volumes:
      - ./data/wireguard:/config
      - /lib/modules:/lib/modules:ro
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    networks:
      - homeserver
    healthcheck:
      test: ["CMD", "test", "-f", "/config/wg0.conf"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # HortusFox - Collaborative plant management system
  hortusfox-db:
    image: mariadb:${HORTUSFOX_MARIADB_VERSION:-latest}
    container_name: hortusfox-db
    restart: unless-stopped
    environment:
      - MARIADB_ROOT_PASSWORD=${HORTUSFOX_DB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${HORTUSFOX_DB_NAME:-hortusfox}
      - MARIADB_USER=${HORTUSFOX_DB_USER:-hortusfox}
      - MARIADB_PASSWORD=${HORTUSFOX_DB_PASSWORD}
      - TZ=${TIMEZONE}
    volumes:
      - ./data/hortusfox/db:/var/lib/mysql
    networks:
      - homeserver
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  hortusfox:
    image: ghcr.io/danielbrendel/hortusfox-web:${HORTUSFOX_VERSION:-latest}
    container_name: hortusfox
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:8181:80"
    environment:
      - APP_ADMIN_EMAIL=${HORTUSFOX_ADMIN_EMAIL}
      - APP_ADMIN_PASSWORD=${HORTUSFOX_ADMIN_PASSWORD}
      - APP_TIMEZONE=${TIMEZONE}
      - DB_HOST=hortusfox-db
      - DB_PORT=3306
      - DB_DATABASE=${HORTUSFOX_DB_NAME:-hortusfox}
      - DB_USERNAME=${HORTUSFOX_DB_USER:-hortusfox}
      - DB_PASSWORD=${HORTUSFOX_DB_PASSWORD}
      - DB_CHARSET=utf8mb4
    volumes:
      - ./data/hortusfox/images:/var/www/html/public/img
      - ./data/hortusfox/logs:/var/www/html/app/logs
      - ./data/hortusfox/backup:/var/www/html/public/backup
      - ./data/hortusfox/themes:/var/www/html/public/themes
      - ./data/hortusfox/migrate:/var/www/html/app/migrations
    networks:
      - homeserver
    depends_on:
      hortusfox-db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hortusfox-http.rule=Host(`hortusfox.home.local`)"
      - "traefik.http.routers.hortusfox-http.entrypoints=web"
      - "traefik.http.routers.hortusfox-http.middlewares=redirect-to-https"
      - "traefik.http.routers.hortusfox.rule=Host(`hortusfox.home.local`)"
      - "traefik.http.routers.hortusfox.entrypoints=websecure"
      - "traefik.http.routers.hortusfox.tls=true"
      - "traefik.http.services.hortusfox.loadbalancer.server.port=80"
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Glance - Personal dashboard and homepage
  glance:
    image: glanceapp/glance:${GLANCE_VERSION:-latest}
    container_name: glance
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:${GLANCE_PORT:-8282}:8080"
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - ./data/glance:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - homeserver
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glance-http.rule=Host(`glance.home.local`)"
      - "traefik.http.routers.glance-http.entrypoints=web"
      - "traefik.http.routers.glance-http.middlewares=redirect-to-https"
      - "traefik.http.routers.glance.rule=Host(`glance.home.local`)"
      - "traefik.http.routers.glance.entrypoints=websecure"
      - "traefik.http.routers.glance.tls=true"
      - "traefik.http.services.glance.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Traefik - Reverse proxy for domain-based service access
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    command:
      # API and Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=homeserver"

      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      # TLS
      - "--entrypoints.websecure.http.tls=true"

      # Ping endpoint for health checks
      - "--ping=true"

      # Logging
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--log.level=INFO"

    ports:
      - "${SERVER_IP}:80:80"
      - "${SERVER_IP}:443:443"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/traefik/certs:/certs
      - ./data/traefik/logs:/var/log/traefik
      - ./config/traefik:/etc/traefik:ro

    networks:
      - homeserver

    labels:
      # Enable Traefik for the dashboard
      - "traefik.enable=true"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`traefik.home.local`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.service=api@internal"

      # Dashboard middleware (basic auth)
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$1$$3TOX7HzuCTU"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"

    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  homeserver:
    driver: bridge
