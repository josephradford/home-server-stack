---
services:
  adguard:
    image: adguard/adguardhome:latest
    container_name: adguard-home
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:53:53/tcp"
      - "${SERVER_IP}:53:53/udp"
      - "${SERVER_IP}:3000:3000/tcp"
      - "${SERVER_IP}:80:80/tcp"
    volumes:
      - ./data/adguard/work:/opt/adguardhome/work
      - ./data/adguard/conf:/opt/adguardhome/conf
    networks:
      - homeserver

  n8n-init:
    image: alpine:latest
    container_name: n8n-init
    restart: "no"
    volumes:
      - ./data/n8n:/data
    command: >
      sh -c "
        mkdir -p /data &&
        chown -R 1000:1000 /data &&
        chmod -R 755 /data
      "

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    user: "1000:1000"
    ports:
      - "${SERVER_IP}:5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=${SERVER_IP}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - N8N_SSL_KEY=${N8N_SSL_KEY}
      - N8N_SSL_CERT=${N8N_SSL_CERT}
      - WEBHOOK_URL=https://${SERVER_IP}:5678/
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
      - GENERIC_TIMEZONE=${TIMEZONE}
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
      - N8N_RUNNERS_TASK_TIMEOUT=${N8N_RUNNERS_TASK_TIMEOUT}
      - EXECUTIONS_TIMEOUT=${EXECUTIONS_TIMEOUT}
      - EXECUTIONS_TIMEOUT_MAX=${EXECUTIONS_TIMEOUT_MAX}
    volumes:
      - ./data/n8n:/home/node/.n8n
      - ./ssl:/ssl:ro
    networks:
      - homeserver
    depends_on:
      - ollama
      - n8n-init

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-1}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS:-1}
      - OLLAMA_LOAD_TIMEOUT=${OLLAMA_LOAD_TIMEOUT:-600}
    volumes:
      - ./data/ollama:/root/.ollama
    networks:
      - homeserver

  ollama-setup:
    image: alpine:latest
    container_name: ollama-setup
    restart: "no"
    depends_on:
      - ollama
    networks:
      - homeserver
    command: >
      sh -c "
        apk add --no-cache curl &&
        echo 'Waiting for Ollama to be ready...' &&
        sleep 15 &&
        echo 'Testing Ollama connectivity...' &&
        curl -f http://ollama:11434/api/version || (echo 'Ollama not ready, exiting' && exit 1) &&
        echo 'Starting model downloads...' &&
        echo 'Pulling deepseek-coder:6.7b (this may take several minutes)...' &&
        curl -X POST http://ollama:11434/api/pull -d '{\"name\":\"deepseek-coder:6.7b\"}' -m 1800 &&
        echo 'Waiting 30 seconds before next download...' &&
        sleep 30 &&
        echo 'Pulling llama3.2:3b (this may take several minutes)...' &&
        curl -X POST http://ollama:11434/api/pull -d '{\"name\":\"llama3.2:3b\"}' -m 1800 &&
        echo 'Model downloads initiated. Check progress with: docker exec ollama ollama ps'
      "

  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    # Security note: LinuxServer.io containers use s6-overlay init system
    # Dropping all capabilities or no-new-privileges prevents init from executing
    # Keep only the required NET_ADMIN and SYS_MODULE capabilities
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - SERVERURL=${WIREGUARD_SERVERURL}
      - SERVERPORT=${WIREGUARD_PORT:-51820}
      - PEERS=${WIREGUARD_PEERS:-5}
      - PEERDNS=${SERVER_IP}
      # CRITICAL: Split tunneling - only route home network traffic through VPN
      # DO NOT use 0.0.0.0/0 unless you want full tunneling (not recommended)
      - INTERNAL_SUBNET=${WIREGUARD_SUBNET:-10.13.13.0/24}
      - ALLOWEDIPS=${WIREGUARD_ALLOWEDIPS:-192.168.1.0/24,10.13.13.0/24}
      - LOG_CONFS=${WIREGUARD_LOG_CONFS:-true}
      - PERSISTENTKEEPALIVE_PEERS=${WIREGUARD_KEEPALIVE:-25}
    ports:
      - "${WIREGUARD_PORT:-51820}:51820/udp"
      - "${SERVER_IP}:51821:51821/tcp"
    volumes:
      - ./data/wireguard:/config
      - /lib/modules:/lib/modules:ro
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    networks:
      - homeserver
    healthcheck:
      test: ["CMD", "test", "-f", "/config/wg0.conf"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Immich - Self-hosted photo and video management
  immich-server:
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    container_name: immich-server
    restart: unless-stopped
    ports:
      - "${SERVER_IP}:2283:2283"
    environment:
      - DB_HOSTNAME=immich-postgres
      - DB_USERNAME=${IMMICH_DB_USER:-immich}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_NAME:-immich}
      - REDIS_HOSTNAME=immich-redis
      - TZ=${TIMEZONE}
    volumes:
      - ./data/immich/upload:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    networks:
      - homeserver
    depends_on:
      immich-postgres:
        condition: service_healthy
      immich-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:2283/api/server-info/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  immich-machine-learning:
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    container_name: immich-machine-learning
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - ./data/immich/model-cache:/cache
    networks:
      - homeserver
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:3003/ping\", timeout=10)'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  immich-redis:
    image: docker.io/redis:7.2-alpine
    container_name: immich-redis
    restart: unless-stopped
    command: redis-server --requirepass ${IMMICH_REDIS_PASSWORD}
    volumes:
      - ./data/immich/redis:/data
    networks:
      - homeserver
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  immich-postgres:
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0
    container_name: immich-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${IMMICH_DB_USER:-immich}
      - POSTGRES_PASSWORD=${IMMICH_DB_PASSWORD}
      - POSTGRES_DB=${IMMICH_DB_NAME:-immich}
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - ./data/immich/pgdata:/var/lib/postgresql/data
    networks:
      - homeserver
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${IMMICH_DB_USER:-immich}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  homeserver:
    driver: bridge
