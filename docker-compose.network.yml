---
# Network & Security Services
# This file contains infrastructure services for networking, reverse proxy, and security
# - Traefik: Reverse proxy with automatic SSL and domain-based routing
# - Wireguard: VPN server for secure remote access
# - Fail2ban: Intrusion prevention system that monitors and blocks malicious traffic

services:
  # Wireguard - VPN server for secure remote access
  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    # Security note: LinuxServer.io containers use s6-overlay init system
    # Dropping all capabilities or no-new-privileges prevents init from executing
    # Keep only the required NET_ADMIN and SYS_MODULE capabilities
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - SERVERURL=${WIREGUARD_SERVERURL}
      - SERVERPORT=${WIREGUARD_PORT:-51820}
      - PEERS=${WIREGUARD_PEERS:-5}
      - PEERDNS=${SERVER_IP}
      # CRITICAL: Split tunneling - only route home network traffic through VPN
      # DO NOT use 0.0.0.0/0 unless you want full tunneling (not recommended)
      - INTERNAL_SUBNET=${WIREGUARD_SUBNET:-10.13.13.0/24}
      - ALLOWEDIPS=${WIREGUARD_ALLOWEDIPS:-192.168.1.0/24,10.13.13.0/24}
      - LOG_CONFS=${WIREGUARD_LOG_CONFS:-true}
      - PERSISTENTKEEPALIVE_PEERS=${WIREGUARD_KEEPALIVE:-25}
    ports:
      - "${WIREGUARD_PORT:-51820}:51820/udp"
      - "${SERVER_IP}:51821:51821/tcp"
    volumes:
      - ./data/wireguard:/config
      - /lib/modules:/lib/modules:ro
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    networks:
      - homeserver
    healthcheck:
      test: ["CMD", "test", "-f", "/config/wg0.conf"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Traefik - Reverse proxy for domain-based service access
  traefik:
    image: traefik:v3.2
    container_name: traefik
    restart: unless-stopped
    command:
      # API and Dashboard
      - "--api.dashboard=true"
      # API exposed on port 8080 for internal Docker network access (not exposed externally)
      - "--api.insecure=true"

      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # File provider for TLS certificates
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"

      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      # TLS
      - "--entrypoints.websecure.http.tls=true"

      # Ping endpoint for health checks
      - "--ping=true"

      # Logging
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--log.level=DEBUG"

    ports:
      - "${SERVER_IP}:80:80"
      - "${SERVER_IP}:443:443"

    environment:
      # Traefik dashboard password (hashed with htpasswd)
      # Generated during setup from TRAEFIK_PASSWORD in .env
      - TRAEFIK_DASHBOARD_USERS=${TRAEFIK_DASHBOARD_USERS}

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/traefik/certs:/certs
      - ./data/traefik/logs:/var/log/traefik
      - ./config/traefik:/etc/traefik:ro

    networks:
      - homeserver

    labels:
      # Enable Traefik for the dashboard
      - "traefik.enable=true"

      # Dashboard router
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      # Using file provider certificate (wildcard from certbot)
      - "traefik.http.routers.dashboard.service=api@internal"

      # Dashboard middleware (basic auth)
      # Uses TRAEFIK_DASHBOARD_USERS from .env (htpasswd format: admin:$apr1$...)
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_USERS}"

      # Security: Combine basic auth + admin-secure (VPN/local only + rate limit + headers)
      # Chain order: internal-only (IP check) → security-headers → admin-ratelimit → dashboard-auth (password)
      - "traefik.http.middlewares.dashboard-secure.chain.middlewares=internal-only,security-headers,admin-ratelimit,dashboard-auth"
      - "traefik.http.routers.dashboard.middlewares=dashboard-secure"

      # Security Headers Middleware
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"

      # Rate Limiting for Webhooks (generous for legitimate use)
      - "traefik.http.middlewares.webhook-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.webhook-ratelimit.ratelimit.period=1m"
      - "traefik.http.middlewares.webhook-ratelimit.ratelimit.burst=50"

      # Rate Limiting for Admin Access (generous for development/testing)
      # Average: 100 requests per minute (allows dashboard refreshes with multiple API calls)
      # Burst: 50 (handles page loads with many simultaneous requests like AdGuard)
      - "traefik.http.middlewares.admin-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.admin-ratelimit.ratelimit.period=1m"
      - "traefik.http.middlewares.admin-ratelimit.ratelimit.burst=50"

      # IP Whitelist for Internal Services (RFC1918 + VPN)
      - "traefik.http.middlewares.internal-only.ipwhitelist.sourcerange=192.168.0.0/16,172.16.0.0/12,10.0.0.0/8"

      # Webhook Security Chain
      - "traefik.http.middlewares.webhook-secure.chain.middlewares=security-headers,webhook-ratelimit"

      # Admin Security Chain (with rate limiting)
      - "traefik.http.middlewares.admin-secure.chain.middlewares=internal-only,security-headers,admin-ratelimit"

      # Admin Security Chain (without rate limiting - for services with many API calls like AdGuard)
      - "traefik.http.middlewares.admin-secure-no-ratelimit.chain.middlewares=internal-only,security-headers"

    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Fail2ban - Protection against brute force and scanning attempts
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - TZ=${TIMEZONE}
      - F2B_DB_PURGE_AGE=30d
      - F2B_LOG_LEVEL=INFO
    volumes:
      - ./data/fail2ban:/data
      - ./data/traefik/logs:/var/log/traefik:ro
      - ./config/fail2ban/jail.local:/etc/fail2ban/jail.local:ro
      - ./config/fail2ban/filter.d:/etc/fail2ban/filter.d:ro
    network_mode: host

networks:
  homeserver:
    driver: bridge
