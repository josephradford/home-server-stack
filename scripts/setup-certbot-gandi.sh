#!/bin/bash
# setup-certbot-gandi.sh
# Sets up certbot with Gandi DNS plugin and generates Let's Encrypt wildcard certificate
#
# This script installs certbot, configures Gandi API credentials, and generates
# a wildcard certificate for *.DOMAIN and DOMAIN using DNS-01 challenge.

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo "Certbot + Gandi DNS Setup for Let's Encrypt Certificates"
echo "=========================================================="
echo ""

# Load environment variables from .env file
if [ -f .env ]; then
    set -a
    source .env
    set +a
else
    echo -e "${RED}ERROR: .env file not found!${NC}"
    echo "Please run this script from the home-server-stack directory"
    exit 1
fi

# Check required variables
if [ -z "$DOMAIN" ]; then
    echo -e "${RED}ERROR: DOMAIN not set in .env file${NC}"
    exit 1
fi

if [ -z "$GANDIV5_PERSONAL_ACCESS_TOKEN" ]; then
    echo -e "${RED}ERROR: GANDIV5_PERSONAL_ACCESS_TOKEN not set in .env file${NC}"
    exit 1
fi

if [ -z "$ACME_EMAIL" ]; then
    echo -e "${RED}ERROR: ACME_EMAIL not set in .env file${NC}"
    exit 1
fi

echo "Configuration:"
echo "  Domain: $DOMAIN"
echo "  Email: $ACME_EMAIL"
echo "  Gandi Token: ${GANDIV5_PERSONAL_ACCESS_TOKEN:0:10}..."
echo ""

# Step 1: Install certbot
echo -e "${YELLOW}Step 1/5: Installing certbot...${NC}"
if ! command -v certbot &> /dev/null; then
    echo "Installing certbot via snap..."
    sudo snap install certbot --classic
    echo -e "${GREEN}✓${NC} Certbot installed"
else
    echo -e "${GREEN}✓${NC} Certbot already installed"
fi
echo ""

# Step 2: Install Gandi DNS plugin
echo -e "${YELLOW}Step 2/5: Installing certbot-dns-gandi plugin...${NC}"
if ! python3 -c "import certbot_dns_gandi" 2>/dev/null; then
    echo "Installing python3-pip if needed..."
    sudo apt-get update -qq
    sudo apt-get install -y python3-pip python3-venv

    echo "Installing certbot-dns-gandi plugin via pip..."
    # Use --break-system-packages for Ubuntu 24.04+ which uses externally-managed Python
    # Use --ignore-installed to avoid conflicts with Debian-managed packages
    sudo pip3 install --break-system-packages --ignore-installed certbot-dns-gandi
    echo -e "${GREEN}✓${NC} Gandi DNS plugin installed"
else
    echo -e "${GREEN}✓${NC} Gandi DNS plugin already installed"
fi
echo ""

# Step 3: Create Gandi credentials file
echo -e "${YELLOW}Step 3/5: Configuring Gandi API credentials...${NC}"
GANDI_CREDS_DIR="/etc/letsencrypt/gandi"
GANDI_CREDS_FILE="$GANDI_CREDS_DIR/gandi.ini"

echo "Creating credentials directory..."
sudo mkdir -p "$GANDI_CREDS_DIR"
sudo chmod 700 "$GANDI_CREDS_DIR"

echo "Writing Gandi API credentials..."
sudo bash -c "cat > $GANDI_CREDS_FILE" <<EOF
# Gandi API credentials for certbot DNS-01 challenge
# Generated by setup-certbot-gandi.sh on $(date)
dns_gandi_api_key = $GANDIV5_PERSONAL_ACCESS_TOKEN
EOF

sudo chmod 600 "$GANDI_CREDS_FILE"
echo -e "${GREEN}✓${NC} Credentials configured at $GANDI_CREDS_FILE"
echo ""

# Step 4: Generate wildcard certificate
echo -e "${YELLOW}Step 4/5: Generating Let's Encrypt wildcard certificate...${NC}"
echo "This will request a certificate for: $DOMAIN and *.$DOMAIN"
echo "Using DNS-01 challenge via Gandi..."
echo ""

# Check if certificate already exists
if sudo certbot certificates 2>/dev/null | grep -q "Domains:.*$DOMAIN"; then
    echo -e "${YELLOW}⚠️  Certificate for $DOMAIN already exists${NC}"
    echo "To renew or recreate, run: sudo certbot delete --cert-name $DOMAIN"
    echo "Then run this script again."
    echo ""
    read -p "Do you want to continue anyway and try to obtain a new certificate? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Skipping certificate generation."
        echo ""
        echo -e "${YELLOW}Step 5/5: Skipped - certificate already exists${NC}"
        echo ""
        echo -e "${GREEN}Setup complete!${NC}"
        echo ""
        echo "To configure Traefik to use this certificate:"
        echo "  1. Run: ./scripts/configure-traefik-file-provider.sh"
        echo "  2. Restart Traefik: sudo docker compose restart traefik"
        exit 0
    fi
fi

sudo certbot certonly \
  --authenticator dns-gandi \
  --dns-gandi-credentials "$GANDI_CREDS_FILE" \
  --dns-gandi-propagation-seconds 60 \
  -d "$DOMAIN" \
  -d "*.$DOMAIN" \
  --email "$ACME_EMAIL" \
  --agree-tos \
  --non-interactive

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✓${NC} Certificate generated successfully!"
    echo ""
    echo "Certificate location: /etc/letsencrypt/live/$DOMAIN/"
    echo "  - Certificate: fullchain.pem"
    echo "  - Private Key: privkey.pem"
else
    echo -e "${RED}ERROR: Certificate generation failed${NC}"
    echo "Check the output above for errors."
    exit 1
fi
echo ""

# Step 5: Display certificate info
echo -e "${YELLOW}Step 5/5: Verifying certificate...${NC}"
sudo certbot certificates
echo ""

# Success message
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Setup Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo "Next steps:"
echo "  1. Copy certificates to Traefik directory:"
echo "     ./scripts/copy-certs-to-traefik.sh"
echo ""
echo "  2. Configure Traefik to use file provider:"
echo "     ./scripts/configure-traefik-file-provider.sh"
echo ""
echo "  3. Restart Traefik:"
echo "     sudo docker compose restart traefik"
echo ""
echo "Certificate renewal:"
echo "  - Certificates auto-renew via snap (certbot renew runs twice daily)"
echo "  - To test renewal: sudo certbot renew --dry-run"
echo "  - Set up automatic cert copying with: ./scripts/setup-cert-renewal.sh"
echo ""
